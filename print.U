/* Copyright (c) 1995 by Mark Hill, James Larus, Joel Saltz, andfor 
 * the Wisconsin Wind Tunnel Project and Joel Saltz for the High Performance 
 * Software Laboratory, University of Maryland, College Park.
 *
 * ALL RIGHTS RESERVED.
 *
 * This software is furnished under a license and may be used and
 * copied only in accordance with the terms of such license and the
 * inclusion of the above copyright notice.  This software or any other
 * copies thereof or any derivative works may not be provided or
 * otherwise made available to any other persons.  Title to and ownership
 * of the software is retained by Mark Hill, James Larus, Joel Saltz, and
 * David Wood.  Any use of this software must include the above copyright notice.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  THE LICENSOR MAKES NO
 * WARRANTIES ABOUT ITS CORRECTNESS OR PERFORMANCE.
 *
 * Shamik Sharma generated the sequential version in C. 
 * Shubhendu Mukherjee (Shubu) parallelized moldyn on Tempest. 
 */

/*
|| Joint project between the Wisconsin Wind Tunnel at the University of Wisconsin, 
|| Madison and Joel Saltz's research group at the University of Maryland, College 
|| Park.  
||
|| Participants: Shubu Mukherjee (*) and Shamik Sharma (!).
||               Mark Hill (*), Jim Larus(*), Anne Rogers (%), Joel Saltz (!).
||		 
||		 (*) University of Wisconsin-Madison
||		 (!) University of Maryland, College Park
||		 (%) Princeton University
*/

#define EXTERN extern
#include "moldyn.h"

/*
!============================================================================
!  Function :  ComputeKE()
!  Purpose :
!     Computes  the KE of the system by summing all
!     the squares of the partial velocities.
!============================================================================
*/

void ComputeKE(ekin,numMoles,vel,timeStepSq)
     double *ekin;
     int numMoles;
     struct val_t *vel;
     double timeStepSq;
{
    double sum;
    int    i;
    
    sum = 0.0 ;
    for (i=0;i<numMoles;i++)
      {
	  sum += SQR(vel[i].x);
	  sum += SQR(vel[i].y);
	  sum += SQR(vel[i].z);
      } 
    (*ekin) = sum/timeStepSq ;
}

/*
!============================================================================
!  Function :  ComputeAvgVel()
!  Purpose :
!     Computes  the KE of the system by summing all
!     the squares of the partial velocities.
!============================================================================
*/

void ComputeAvgVel(avgvel,count,numMoles,vel,vaver,timestep)
     double *avgvel;
     double *count;
     int numMoles;
     struct val_t *vel;
     double vaver, timestep;
{
    double vaverh, velocity, counter, sq;
    int i;
    
    vaverh = vaver * timestep ;
    velocity = 0.0 ;
    counter  = 0.0 ;
    for (i=0;i<numMoles;i++) 
      {
	  sq = SQRT(SQR(vel[i].x) + SQR(vel[i].y) + SQR(vel[i].z));
	  if (sq > vaverh) counter += 1.0 ;
	  velocity += sq ;
      }  
    
    *avgvel = (velocity/timestep);
    *count = counter;
}

/*
!=============================================================
!  Function : PrintResults()
!  Purpose  :
!    Prints out the KE, the PE and other results
!=============================================================
*/

LOCAL void PrintResults(move,ekin,epot,vir,avgvel,count,numMoles,ninteracts)
     int move, numMoles, ninteracts;
     double ekin, *epot,  *vir, avgvel, count;
{
    double ek, etot, temp, pres, rp, tscale ;
    double tot_vir = 0, tot_epot = 0;
    int i;
    
    fprintf(stdout,
	    "\n TimeStep   K.E.        P.E.        Energy    Temp.     Pres.    Vel.    rp ");
    fprintf(stdout,
	    "\n -------- --------   ----------   ----------  -------  -------  ------  ------\n");
    
    for (i=0;i<XX_NUM_NODES;i++)
      {
	  tot_vir += vir[i];
	  tot_epot += epot[i];
      }
    
    ek       = 24.0 * ekin ;
    tot_epot = 4.00 * tot_epot ;
    etot     = ek + tot_epot ;
    tscale   = (16.0)/((double)numMoles - 1.0);
    temp     = tscale * ekin ;
    pres     = DENSITY * 16.0 * (ekin-tot_vir)/numMoles ;
    avgvel   = avgvel/numMoles;
    rp       = (count/(double)(numMoles)) * 100.0 ;
    
    fprintf(stdout,
	    "\n %4d %12.4f %12.4f %12.4f %8.4f %8.4f %8.4f %5.1f",
	    move, ek,    tot_epot ,   etot,   temp,   pres,   avgvel,     rp);
    
    verify(number_timesteps, ek, tot_epot, etot, temp, pres, avgvel, rp);
}

void PrintConnectivity(char *s, int *node_list)
{
    int i, min, max; 
    float sum, sumsq, stdev, avg;
    
    sum = node_list[0];
    sumsq = SQR(node_list[0]);
    min = max = node_list[0];
    
    for (i=1;i<XX_NUM_NODES;i++)
      {
	  sum += node_list[i];
	  sumsq += SQR(node_list[i]);
	  if (min > node_list[i])
	    min = node_list[i];
	  if (max < node_list[i])
	    max = node_list[i];
      }
    
    avg = sum / XX_NUM_NODES;
    stdev = sqrt((sumsq / XX_NUM_NODES) - SQR(avg));
    
    printf("%s: avg = %4.1f, dev = %4.1f, min = %d, max = %d\n", 
	   s, avg, stdev, min, max);
    
}

void dump_values(char *s)
{
    int i;
    printf("%s\n", s);
    for (i=0;i<numMoles;i++)
      {
	  printf("%d: coord = (%f, %f, %f), vel = (%f, %f, %f), force = (%f, %f, %f)\n", 
		 i, 
		 coord[i].x, coord[i].y, coord[i].z,
		 vel[i].x, vel[i].y, vel[i].z,
		 force[i].x, force[i].y, force[i].z);
      }
}

