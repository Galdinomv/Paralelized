/* Copyright (c) 1995 by Mark Hill, James Larus, Joel Saltz, andfor 
 * the Wisconsin Wind Tunnel Project and Joel Saltz for the High Performance 
 * Software Laboratory, University of Maryland, College Park.
 *
 * ALL RIGHTS RESERVED.
 *
 * This software is furnished under a license and may be used and
 * copied only in accordance with the terms of such license and the
 * inclusion of the above copyright notice.  This software or any other
 * copies thereof or any derivative works may not be provided or
 * otherwise made available to any other persons.  Title to and ownership
 * of the software is retained by Mark Hill, James Larus, Joel Saltz, and
 * David Wood.  Any use of this software must include the above copyright notice.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  THE LICENSOR MAKES NO
 * WARRANTIES ABOUT ITS CORRECTNESS OR PERFORMANCE.
 *
 * Shamik Sharma generated the sequential version in C. 
 * Shubhendu Mukherjee (Shubu) parallelized moldyn on Tempest. 
 */

 /*
|| Joint project between the Wisconsin Wind Tunnel at the University of Wisconsin, 
|| Madison and Joel Saltz's research group at the University of Maryland, College 
|| Park.  
||
|| Participants: Shubu Mukherjee (*) and Shamik Sharma (!).
||               Mark Hill (*), Jim Larus(*), Anne Rogers (%), Joel Saltz (!).
||		 
||		 (*) University of Wisconsin-Madison
||		 (!) University of Maryland, College Park
||		 (%) Princeton University
*/

#define EXTERN extern
#include "moldyn.h"

#ifdef DUMP_MESH_STATS

/* 
|| Number of particles per processor (avg, min, max)
|| Size of interaction list
|| Number of remote edges (avg, min, max)
*/

inline void add_remote(struct node_list_t *remote_nodes, int proc, int node)
{
    int i;
    for (i = 0; i < remote_nodes[proc].num; i++)
      {
	  if (remote_nodes[proc].nodes[i] == node)
	    return;
      }

    if (remote_nodes[proc].num > MAX_NODES)
      fatal_error("Total nodes on proc %d > max(%d)\n",
		  proc, MAX_NODES);

    remote_nodes[proc].nodes[remote_nodes[proc].num++] = node;
}

inline int BETWEEN(int n1, int start, int end)
{
    if (n1 >= start && n1 <= end)
      return 1;
    else
      return 0;
}

static int cut_interactions = 0;

void process_remote(int ninter)
{
    int i;

    assert(remote_nodes != NULL);

    for (i = low_interaction;
	 i <= high_interaction;
	 i++)
      { 
	  int p0 = XX_NODE_NUMBER;
	  int n1 = inter[i].left;
	  int n2 = inter[i].right;
	  int p1, p2;

	  if (BETWEEN(n1, low_node[XX_NODE_NUMBER], high_node[XX_NODE_NUMBER]))
	    p1 = XX_NODE_NUMBER;
	  else
	    p1 = -1;

	  if (BETWEEN(n2, low_node[XX_NODE_NUMBER], high_node[XX_NODE_NUMBER]))
	    p2 = XX_NODE_NUMBER;
	  else
	    p2 = -1;

	  if (p0 != p1)
	    {
		add_remote(remote_nodes, p0, n1);
	    }
	  
	  if (p0 != p2)
	    {
		add_remote(remote_nodes, p0, n2);
	    }
	  
	  if (p0 != p1 || p0 != p2)
	    {
		cut_interactions++;
	    }
      }
    
    BARRIER(,XX_NUM_NODES);

    cut_interactions = reduce_int(ADD_SCAN, cut_interactions);
}

void dump_mesh_stats(int ninter, struct inter_t *inter, int *tot_interact)
{
    int mn, mx, sm, i, j, *avg_conn;

    if (XX_NODE_NUMBER == 0)
      {
	  printf("------------------------- MESH STATS -------------------------------\n");
      }
    BARRIER(,XX_NUM_NODES);

    process_remote(ninter);

    BARRIER(,XX_NUM_NODES);

    if (XX_NODE_NUMBER == 0)
      {
	  assert(remote_nodes != NULL);
	  
	  if (remote_nodes == NULL)
	    fatal_error("remote_nodes == NULL (after malloc)\n");
	  
	  mn = mx = sm = high_node[0] - low_node[0] + 1;
	  
	  for (i = 1; i < XX_NUM_NODES; i++)
	    {
		if (mn > (high_node[i] - low_node[i] + 1))
		  mn = (high_node[i] - low_node[i] + 1);
		
		if (mx < (high_node[i] - low_node[i] + 1))
		  mx = (high_node[i] - low_node[i] + 1);
		
		sm += (high_node[i] - low_node[i] + 1);
	    }
	  
	  printf("Total number of nodes = %d\n", num_particles);
	  
	  printf("Number of nodes per processor: min = %d, max = %d, avg = %d\n",
		 mn, mx, sm / XX_NUM_NODES);
	  
	  printf("Total number of interactions (edges) = %d\n", ninter);

	  printf("Total number of cut interactions (edges) = %d (%f %%)\n",
		 cut_interactions, (((float)cut_interactions) * 100) / ninter);

	  mn = mx = sm = remote_nodes[0].num;
	  
	  for (i = 1; i < XX_NUM_NODES; i++)
	    {
		if (mn > remote_nodes[i].num)
		  mn = remote_nodes[i].num;
		
		if (mx < remote_nodes[i].num)
		  mx = remote_nodes[i].num;
		
		sm += remote_nodes[i].num;
	    }
	  
	  printf("Number of remote nodes per processor: min = %d, max = %d, avg = %d\n",
		 mn, mx, sm / XX_NUM_NODES);

	  avg_conn   = (int *)local_malloc_z(sizeof(int) * num_particles);
	  
	  for (i = 0; i < ninter; i++)
	    {
		int n1 = inter[i].left;
		int n2 = inter[i].right;

		avg_conn[n1]++;	
		avg_conn[n2]++;
	    }
	  
	  mn = mx = sm = avg_conn[0];
	  
	  for (i = 1; i < num_particles; i++)
	    {
		if (mn > avg_conn[i])
		  mn = avg_conn[i];
		
		if (mx < avg_conn[i])
		  mx = avg_conn[i];
		
		sm += avg_conn[i];
	    }
	  
	  printf("Number of interactions per particle: min = %d, max = %d, avg = %d\n",
		 mn, mx, sm / num_particles);
	  
	  fflush(stdout);
	  
	  free(avg_conn);
      }
    BARRIER(,XX_NUM_NODES);

    if (XX_NODE_NUMBER == 0)
      {
	  printf("------------------------- MESH STATS -------------------------------\n");
      }
}
#endif

