/* Copyright (c) 1995 by Mark Hill, James Larus, Joel Saltz, andfor 
 * the Wisconsin Wind Tunnel Project and Joel Saltz for the High Performance 
 * Software Laboratory, University of Maryland, College Park.
 *
 * ALL RIGHTS RESERVED.
 *
 * This software is furnished under a license and may be used and
 * copied only in accordance with the terms of such license and the
 * inclusion of the above copyright notice.  This software or any other
 * copies thereof or any derivative works may not be provided or
 * otherwise made available to any other persons.  Title to and ownership
 * of the software is retained by Mark Hill, James Larus, Joel Saltz, and
 * David Wood.  Any use of this software must include the above copyright notice.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  THE LICENSOR MAKES NO
 * WARRANTIES ABOUT ITS CORRECTNESS OR PERFORMANCE.
 *
 * Shamik Sharma generated the sequential version in C. 
 * Shubhendu Mukherjee (Shubu) parallelized moldyn on Tempest. 
 */

/*
|| Joint project between the Wisconsin Wind Tunnel at the University of Wisconsin, 
|| Madison and Joel Saltz's research group at the University of Maryland, College 
|| Park.  
||
|| Participants: Shubu Mukherjee (*) and Shamik Sharma (!).
||               Mark Hill (*), Jim Larus(*), Anne Rogers (%), Joel Saltz (!).
||		 
||		 (*) University of Wisconsin-Madison
||		 (!) University of Maryland, College Park
||		 (%) Princeton University
*/

/***********************************************************
!  MITS - MARYLAND IRREGULAR TEST SET
!
!  Shamik D. Sharma, _OTHERS_
!  Computer Science Department,
!  University of Maryland,
!  College Park, MD-20742
!
!  Copyright (c) 1994
!  Shamik D. Sharma, _OTHERS_
!
!  Contact: shamik@cs.umd.edu
************************************************************/

/************************************************************
!File     : moldyn.c
!Origin   : TCGMSG (Argonne), Shamik Sharma
!Created  : Shamik Sharma, 
!Modified : Shamik Sharma,
!Status   : Tested for BOXSIZE = 4,8,13
!
!Description :  Calculates the motion of  particles
!               based on forces acting on each particle
!               from particles within a certain radius. 
!
!Contents : The main computation is in function main()
!           The structure of the computation is as follows:
!
!     1. Initialise variables
!     2. Initialise coordinates and velocities of molecules based on
!          some distribution.
!     3. Iterate for N time-steps
!         3a. Update coordinates of molecule.
!         3b. On Every xth iteration 
!             ReBuild the interaction-list. This list
!             contains every pair of molecules which 
!             are within a cutoffSquare radius  of each other.
!         3c. For each pair of molecule in the interaction list, 
!             Compute the force on each molecule, its velocity etc.
!     4.  Using final velocities, compute KE and PE of system.
!Usage:
!      At command line, type :
!      %  moldyn
!
!Input Data :
!      The default setting simulates the dynamics with 8788
!      particles. A smaller test-setting can be achieved by
!      changing  BOXSIZE = 4.  To do this, change the #undef SMALL
!      line below to #define SMALL. No other change is required.
*************************************************************/

#define EXTERN
#include "moldyn.h"

#ifdef USE_NOACK_UPDATES
int num_updates;
char *coord_local;
#endif

extern long random();
extern int srandom();

/*
!============================================================================
!  Function : main()
!  Purpose  :  
!      All the main computational structure  is here
!      Iterates for specified number of  timesteps.
!      In each time step, 
!        UpdateCoordinates() changes molecules coordinates based
!              on the velocity of that molecules
!              and that molecules
!        BuildNeigh() rebuilds the interaction-list on
!              certain time-steps
!        ComputeForces() - the time-consuming step, iterates
!              over all interacting pairs and computes forces
!        UpdateVelocities() - updates the velocities of
!              all molecules  based on the forces. 
!============================================================================
*/

int low_index(total, proc)
     int total, proc;
{
    int number = DIV_CEIL(total, XX_NUM_NODES);
    return (number * proc);
}

int high_index(total, proc)
     int total, proc;
{
    int number = DIV_CEIL(total, XX_NUM_NODES);
    int high = number * proc + number - 1;
    if (high >= total)
      return (total-1);
    else
      return high;
}

unsigned total_parallel_time = 0;
unsigned tot_coord = 0, tot_neigh = 0, tot_force = 0, tot_vel = 0, 
tot_reduce = 0, tot_touch = 0;

#if (defined(BLZ) || defined(TZERO))
void real_main(int argc, char **argv)
#else
void main(int argc, char **argv)
#endif
{
    unsigned start_time, end_time;
    
    INITENV(200000);
    
    print_initial_message();
    
    assert(XX_NUM_NODES <= MAX_PROC);
    
#ifdef NO_FORK_SEMANTICS
    set_fork_semantics(&boxsize, sizeof(int));
    set_fork_semantics(&number_timesteps, sizeof(int));
    set_fork_semantics(&maxinteract, sizeof(int));
    set_fork_semantics(&num_particles, sizeof(int));
    set_fork_semantics(&dimsize, sizeof(int));
#endif NO_FORK_SEMANTICS
    
#ifdef DEFAULT_PARAMETERS
    boxsize = BOXSIZE;
    number_timesteps = NUMBER_TIMESTEPS;
    maxinteract = MAXINTERACT;
#else
    if (argc < 3) 
      fatal_error("Wrong number of arguments\n");
    
    boxsize = atoi(argv[1]);
    number_timesteps = atoi(argv[2]);
    maxinteract = atoi(argv[3]);  
#endif
    
    num_particles = 4 * boxsize * boxsize * boxsize;
    dimsize = num_particles;
    
    InitSettings();
    InitCoordinates(coord,INPARAMS numMoles, boxsize, perturb);
    InitVelocities(vel,INPARAMS numMoles*3, timeStep);
    InitForces(force, INPARAMS numMoles); 
    
    init_remote_pairs();

#ifdef COORD_BISEC
    coordinate_bisection(numMoles, coord, vel, force);
#endif

    CLOCK(start_time);

    CREATE_ALL(iterate);
    
    iterate();
    
    WAIT_FOR_END(XX_NUM_NODES-1);

    CLOCK(end_time);

#ifdef DUMP_MESH_STATS
    
    return;
    
#endif
    
    total_parallel_time = end_time - start_time;
    
#if (defined(CYCLES_PER_SECOND))
    printf("Total parallel time   = %6.1f seconds\n", 
	   (((float)total_parallel_time) * 1000)/CYCLES_PER_SECOND);
#else
    printf("Total parallel time   = %10d * 1000 cycles\n", total_parallel_time);
#endif
    
#ifdef TIME
    
#if (defined(CYCLES_PER_SECOND))
    
    printf("   UpdateCoordinates  = %6.1f seconds\n", 
	   (((float)tot_coord) * 1000)/CYCLES_PER_SECOND);
    printf("   BuildNeigh         = %6.1f seconds\n", 
	   (((float)tot_neigh) * 1000)/CYCLES_PER_SECOND);
    
#ifdef UPDATE_EXPT
    printf("   Touch Coord        = %6.1f seconds\n", 
	   (((float)tot_touch) * 1000)/CYCLES_PER_SECOND); 
#endif
    
    printf("   Core ComputeForces = %6.1f seconds\n", 
	   (((float)tot_force) * 1000)/CYCLES_PER_SECOND);
    printf("   ReduceForces       = %6.1f seconds\n", 
	   (((float)tot_reduce) * 1000)/CYCLES_PER_SECOND);
    printf("   UpdateVelocities   = %6.1f seconds\n", 
	   (((float)tot_vel) * 1000)/CYCLES_PER_SECOND);
    
#else
    
    printf("   UpdateCoordinates  = %10d * 1000 cycles\n", tot_coord);
    printf("   BuildNeigh         = %10d * 1000 cycles\n", tot_neigh);
#ifdef UPDATE_EXPT
    printf("   Touch Coord        = %10d * 1000 cycles\n", tot_touch);
#endif
    printf("   Core ComputeForces = %10d * 1000 cycles\n", tot_force);
    printf("   ReduceForces       = %10d * 1000 cycles\n", tot_reduce);
    printf("   UpdateVelocities   = %10d * 1000 cycles\n", tot_vel);
    
#endif CYCLES_PER_SECOND
    
#endif TIME
}

/* load balancing */
/*
 * Solution of quadratic equation in low:-
 * (n-1) + (n-2) + ... + (n-low) = XX_NODE_NUMBER * [n * (n-1) / XX_NUM_NODES]
 *
 * Solution of the form:-
 *	 low = (tn - sqrt(tn^2 - 4K))/2, tn and K defined below.
 */
int get_inter_index()
{
    double tn = (2 * num_particles - 1);
    double K =  ((double)(num_particles) * 
		 (double)(num_particles - 1) * 
		 XX_NODE_NUMBER)/ (1.0 * XX_NUM_NODES);
    double root = sqrt(SQR(tn) - 4 * K);
    
    if (tn < root)
      {
	  fatal_error("tn (%lf) < root (%lf), num_particles = %d, K = %lf\n", 
		      tn, root, num_particles, K);
      }
    /*
       assert(tn >= root);
       */
    
    return ((int)((tn - root)/2));
}


void iterate()
{
    int tstep;
    double count, avgvel, ekin;
    unsigned start_rest_time = 0, end_rest_time = 0;

#ifdef TZERO
    dumpStats("CLEAR");
#endif

    local_init();
    
    for (tstep=0; tstep < number_timesteps; tstep++) 
    {
	if (XX_NODE_NUMBER == 0)
	{
	    printf("Iteration %d\n", tstep);
        }

	if (tstep == 1)
	{
	    CLOCK(start_rest_time);
	}
	
	UpdateCoordinates(coord, vel, force, INPARAMS side, tstep);
	
	if (tstep % neighUpdate == 0) 
	{
	    if (XX_NUM_NODES == 1)
		BuildNeighOne(inter, 
			      INPARAMS numMoles, coord, side, cutoffRadius); 
	    else
		BuildNeigh(inter, 
			   INPARAMS inter_local, numMoles, coord, 
			   side, cutoffRadius);
	}
	  
#ifdef DUMP_MESH_STATS
	return;
#endif
	  
	if (XX_NUM_NODES == 1)
	{
	    ComputeForcesOne(force, &vir[XX_NODE_NUMBER], 
			     &epot[XX_NODE_NUMBER], 
			     INPARAMS numMoles, coord, side, 
			     cutoffRadius, global->num_interact, inter);
	}
	else
	{
	    
#ifdef NO_LOCKING
	    memset((char *)force_local, 0, 
		   sizeof(struct force_val_t) * num_particles);
	    
	    ComputeForces(force_local, &vir[XX_NODE_NUMBER], 
			  &epot[XX_NODE_NUMBER],  
			  INPARAMS numMoles, coord, side, 
			  cutoffRadius, global->num_interact, inter,
			  (tstep % neighUpdate == 0));
	    
	    /* 
	     * accumulate force_local into global array force by a pipelined
	     * reduction.
	     */
	    
	    ReduceForces(force, INPARAMS force_local, num_particles);
	    
	    print_debug("ReduceForces");
	    
	    
#else
	    ComputeForces(force, &vir[XX_NODE_NUMBER], &epot[XX_NODE_NUMBER], 
			  INPARAMS numMoles, coord, side, 
			  cutoffRadius, global->num_interact, inter,
			  (tstep % neighUpdate == 0));
#endif  NO_LOCKING
	}
	
	UpdateVelocities(force, vel, INPARAMS numMoles, timeStepSqHalf);
	
	if (tstep == number_timesteps - 1)
	{
	    CLOCK(end_rest_time);
	}
    }
    
    if (XX_NODE_NUMBER == 0)
    {
	printf("rest iterations: %d - %d cycles\n",
	       start_rest_time * 1000,
	       end_rest_time  * 1000); 
    }
    
    if (XX_NODE_NUMBER == 0)
    {
	ComputeKE    (&ekin,        INPARAMS numMoles, vel, timeStepSq);
	ComputeAvgVel(&avgvel, &count, INPARAMS numMoles, vel, vaver, timeStep);
	  
	PrintResults (INPARAMS (tstep-1),ekin,epot,vir,avgvel,count,numMoles,
		      global->num_interact); 
	printf("\n");
    }

#ifdef TZERO
    dumpStats("INTERVAL");
#endif
}

/*
 *=============================================================
 *  Function : drand_x()
 *  Purpose  :
 *    Used to calculate the distance between two molecules
 *    given their coordinates.
 *=============================================================
 */
LOCAL double drand_x(int seed)
{
    double tmp =( (double) random() ) * 4.6566128752458e-10;
    return tmp;
}

/*
 *=============================================================
 *  Function : Foo()
 *  Purpose  :
 *    Used to calculate the distance between two molecules
 *    given their coordinates.
 *=============================================================
 */
LOCAL double Foo( xi, yi, zi, xj, yj, zj, side, sideHalf )
     double xi, yi, zi, xj, yj, zj,  side , sideHalf;
{
    double xx, yy, zz, rd;
    
    xx = xi - xj;
    yy = yi - yj;
    zz = zi - zj;
    if ( xx < -sideHalf ) xx += side ;
    if ( yy < -sideHalf ) yy += side ;
    if ( zz < -sideHalf ) zz += side ;
    if ( xx >  sideHalf ) xx -= side ;
    if ( yy >  sideHalf ) yy -= side ;
    if ( zz >  sideHalf ) zz -= side ;
    rd = xx*xx + yy*yy + zz*zz ;
    return (rd);
}


#ifdef USE_NOACK_UPDATES
void compute_num_updates(char *coord_local)
{
    int i;
    int block_len = STACHE_BLK_SIZE / sizeof(struct val_t);
    int ctr;
    
    num_updates = 0;
    
    for (i=0;i<num_particles; i += block_len)
      {
	  int j;
	  
	  ctr = 0;
	  for (j=0;j<block_len;j++)
	    {
		if (coord_local[i+j])
		  ctr = 1;
	    }
	  
	  if (ctr && default_home(&coord[i]) != XX_NODE_NUMBER)
	    num_updates++;
      }
    
    /*
     *  printf("%d: num_updates expected = %d\n", XX_NODE_NUMBER, num_updates);
     */
    memset(coord_local, 0, num_particles);
}
#endif



