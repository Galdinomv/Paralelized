/* Copyright (c) 1995 by Mark Hill, James Larus, Joel Saltz, andfor 
 * the Wisconsin Wind Tunnel Project and Joel Saltz for the High Performance 
 * Software Laboratory, University of Maryland, College Park.
 *
 * ALL RIGHTS RESERVED.
 *
 * This software is furnished under a license and may be used and
 * copied only in accordance with the terms of such license and the
 * inclusion of the above copyright notice.  This software or any other
 * copies thereof or any derivative works may not be provided or
 * otherwise made available to any other persons.  Title to and ownership
 * of the software is retained by Mark Hill, James Larus, Joel Saltz, and
 * David Wood.  Any use of this software must include the above copyright notice.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  THE LICENSOR MAKES NO
 * WARRANTIES ABOUT ITS CORRECTNESS OR PERFORMANCE.
 *
 * Shamik Sharma generated the sequential version in C. 
 * Shubhendu Mukherjee (Shubu) parallelized moldyn on Tempest. 
 */

/*
|| Joint project between the Wisconsin Wind Tunnel at the University of Wisconsin, 
|| Madison and Joel Saltz's research group at the University of Maryland, College 
|| Park.  
||
|| Participants: Shubu Mukherjee (*) and Shamik Sharma (!).
||               Mark Hill (*), Jim Larus(*), Anne Rogers (%), Joel Saltz (!).
||		 
||		 (*) University of Wisconsin-Madison
||		 (!) University of Maryland, College Park
||		 (%) Princeton University
*/

#define EXTERN extern
#include "moldyn.h"

char *global_malloc_sbrk(int size)
{	
    extern void *shm_sbrk(int);

    char *x = (char *)shm_sbrk(size);
    if (x == NULL)
      {
	  fatal_error("shm_sbrk(%d) returned NULL\n", size);
	  return NULL; /* to satisfy the compiler */
      }
    else
      {
	  return x;
      }
}

char *global_malloc(int size)
{
    char *x = (char *)G_MALLOC(size);
    if (x == NULL)
      {
	  fatal_error("G_MALLOC(%d) returned NULL\n", size);
	  return NULL; /* to satisfy the compiler */
      }
    else
      {
	  return x;
      }
}

char *local_malloc(int size)
{
    char *x = (char *)malloc(size);
    if (x == NULL)
      {
	  fatal_error("malloc(%d) returned NULL\n", size);
	  return NULL; /* to satisfy the compiler */
      }
    else
      {
	  return x;
      }
}

char *local_malloc_z(int size)
{
    char *x = (char *)malloc(size);
    if (x == NULL)
      {
	  fatal_error("malloc(%d) returned NULL\n", size);
	  return NULL; /* to satisfy the compiler */
      }
    else
      {
	  memset(x, 0, size);
	  return x;
      }
}

extern unsigned tot_coord, tot_neigh, tot_force, tot_vel;
int *dummy_page;

void align_pages()
{
#ifdef LOCAL_ALLOC
    
    dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
    while(default_home(dummy_page) != XX_NUM_NODES - 1)
      dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
#else
    
    /* 
       || The foll. are specifically for experiments with the medium data set on 
       || 16 processors 
       */
#ifdef NON_LOCAL_ALLOC
    
    dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
    while(default_home(dummy_page) != 0) 
      dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
#else 
#ifdef NON_LOCAL_ALLOC_FAR
    
    dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
    while(default_home(dummy_page) != 8) 
      dummy_page = (int *)global_malloc_sbrk(PAGE_SIZE);
    
#endif NON_LOCAL_ALLOC_FAR
#endif NON_LOCAL_ALLOC
#endif LOCAL_ALLOC
}

/*
   !============================================================================
   !  Function :  InitSettings()
   !  Purpose  : 
   !     This routine sets up the global variables
   !============================================================================
   */

void InitSettings()
{
#ifdef NO_FORK_SEMANTICS
    set_fork_semantics(&global, sizeof(struct global_t *));
    
    set_fork_semantics(&inter, sizeof(struct inter_t *));
    set_fork_semantics(&coord, sizeof(struct val_t *));
    set_fork_semantics(&force, sizeof(struct force_val_t *));
    set_fork_semantics(&vel,   sizeof(struct val_t *));
    set_fork_semantics(&numMoles, sizeof(int));
    set_fork_semantics(&side, sizeof(double));
    set_fork_semantics(&sideHalf, sizeof(double));
    set_fork_semantics(&cutoffRadius, sizeof(double));
    set_fork_semantics(&timeStep, sizeof(double));
    set_fork_semantics(&timeStepSq, sizeof(double));
    set_fork_semantics(&timeStepSqHalf, sizeof(double));
    set_fork_semantics(&neighUpdate, sizeof(int));
    set_fork_semantics(&perturb, sizeof(double));
    set_fork_semantics(&vaver, sizeof(double));
    set_fork_semantics(&vir, sizeof(double *));
    set_fork_semantics(&epot, sizeof(double *));
    set_fork_semantics(&tot_interact, sizeof(int *));
    set_fork_semantics(&inter_index, sizeof(int *));

#ifdef DUMP_MESH_STATS
    set_fork_semantics(&remote_nodes, sizeof(struct node_list_t *));
#endif
    
#endif NO_FORK_SEMANTICS
    
    inter = (struct inter_t*)global_malloc(sizeof(struct inter_t)*(maxinteract));
    
    align_pages();
    
    coord = (struct val_t *)global_malloc_sbrk(sizeof(struct val_t)*(num_particles));
    
    align_pages();
    
    vel   = (struct val_t *)global_malloc_sbrk(sizeof(struct val_t)
					       * (num_particles));
    
    align_pages();
    
    force = (struct force_val_t *)global_malloc_sbrk(sizeof(struct force_val_t)
						     * (num_particles));
    
    vir  = (double *)global_malloc(sizeof(double)*XX_NUM_NODES);
    epot = (double *)global_malloc(sizeof(double)*XX_NUM_NODES);
    tot_interact = (int *)global_malloc(sizeof(int)*XX_NUM_NODES);
    inter_index = (int *)global_malloc(sizeof(int)*(XX_NUM_NODES+1));
    global = (struct global_t *)global_malloc(sizeof(struct global_t));

    if (inter == NULL || coord == NULL || force == NULL || vel == NULL 
	|| global == NULL) {
	fprintf(stderr,
		"\n Malloc error: line %d ,File %s",__LINE__, __FILE__ );
	exit(0);
    }
    
    LOCKINIT(global->num_interact_lock);
    
#ifndef NO_LOCKING
    ALOCKINIT(global->force_lock, num_particles);
#endif  NO_LOCKING
    
#ifdef DUMP_MESH_STATS
    remote_nodes = (struct node_list_t *)global_malloc(XX_NUM_NODES *
						       sizeof(struct node_list_t));
#endif
    numMoles  = 4*boxsize*boxsize*boxsize;
    
    side   = POW( ((double)(numMoles)/DENSITY), 0.3333333);
    sideHalf  = side * 0.5 ;
    
    cutoffRadius  = MIN(CUTOFF, sideHalf );
    
    timeStep      = DEFAULT_TIMESTEP/SCALE_TIMESTEP ;
    timeStepSq    = timeStep   * timeStep ;
    timeStepSqHalf= timeStepSq * 0.5 ;
    
    neighUpdate   = 10*(1+SCALE_TIMESTEP/4);
    perturb       = side/ (double)boxsize;
    vaver         = 1.13 * SQRT(TEMPERATURE/24.0);
    
    fprintf(stdout,"\nNumber of particles is ......... %6d", numMoles);
    fprintf(stdout,"\nSide length of the box is ...... %13.6e",side);
    fprintf(stdout,"\nCut off radius is .............. %13.6e",cutoffRadius);
    fprintf(stdout,"\nTemperature is ................. %13.6e",TEMPERATURE);
    fprintf(stdout,"\nTime step is ................... %13.6e",timeStep);
    fprintf(stdout,"\nInteraction-list updated every..   %d steps",neighUpdate);
    fprintf(stdout,"\nTotal no. of steps .............   %d ",number_timesteps);

    fprintf(stdout,"\nPerturbation %e\n", perturb);

    fprintf(stdout, "\n\n");
}

/*
 *============================================================================
 *  Function : InitCoordinates()
 *  Purpose  :
 *     Initialises the coordinates of the molecules by 
 *     distribuuting them uniformly over the entire box
 *     with slight perturbations.
 *============================================================================
 */

void InitCoordinates(struct val_t *coord, int numMoles, int siz, double perturb)
{
    int n, k, j, i, npoints;
    
    npoints = siz * siz * siz ; 
    for (n = 0; n < npoints; n++) 
      {
	  k = n % siz ;
	  j = (int)((n - k)/siz) % siz;
	  i = (int)((n - k - j * siz)/(siz * siz)) % siz ; 
	  
	  coord[n].x = i * perturb;
	  coord[n].y = j * perturb ;
	  coord[n].z = k * perturb ;
	  
	  coord[n + npoints].x = i * perturb + perturb * 0.5;
	  coord[n + npoints].y = j * perturb + perturb * 0.5;
	  coord[n + npoints].z = k * perturb ;

	  coord[n + npoints * 2].x = i * perturb + perturb * 0.5;
	  coord[n + npoints * 2].y = j * perturb ;
	  coord[n + npoints * 2].z = k * perturb + perturb * 0.5;
	  
	  coord[n + npoints * 3].x = i * perturb ;
	  coord[n + npoints * 3].y = j * perturb + perturb * 0.5;
	  coord[n + npoints * 3].z = k * perturb + perturb * 0.5;
      }

    
} 

/*
 *============================================================================
 * Function  :  InitVelocities()
 * Purpose   :
 *    This routine initializes the velocities of the 
 *    molecules according to a maxwellian distribution.
 *============================================================================
 */

void InitVelocities(struct val_t *vel, 
		    int n3, 
		    double h)
{
    int i, nmoles1, nmoles2, iseed;
    double ekin, ts, sp, sc, r, s;
    double u1, u2, v1, v2, ujunk, tscale;
    double DRAND(int);
    double *vh;
    
    /* 
       || Initialization is a little tricky.  Hence initializing local
       || copies, and copying to global memory at the end.
       */
    vh = (double *)local_malloc(sizeof(double) * num_particles * 3);
    
    iseed = 4711;
    ujunk = DRAND(iseed);  
    iseed = 0;
    tscale = (16.0)/(1.0 * numMoles - 1.0);
    
    for (i = 0; i < n3; i = i + 2) 
      {
	  do 
	    {
		u1 = DRAND(iseed);
		u2 = DRAND(iseed);
		v1 = 2.0 * u1   - 1.0;
		v2 = 2.0 * u2   - 1.0;
		s  = v1*v1  + v2*v2 ;
	    } while( s >= 1.0 );
	  
	  r = SQRT( -2.0*log(s)/s );
	  vh[i]    = v1 * r;
	  vh[i+1]  = v2 * r;
      }       
    
    /* There are three parts - repeat for each part */
    nmoles1 = n3/3 ;
    nmoles2 = nmoles1 * 2; 
    
    /*  Find the average speed  for the 1st part */
    sp   = 0.0 ;
    for ( i=0; i<nmoles1; i++) 
      sp = sp + vh[i];
    sp   = sp/nmoles1;
    
    
    /*  Subtract average from all velocities of 1st part*/
    for ( i=0; i<nmoles1; i++) 
      vh[i] = vh[i] - sp;
    
    /*  Find the average speed for 2nd part*/
    sp   = 0.0 ;
    for ( i=nmoles1; i<nmoles2; i++) 
      sp = sp + vh[i];
    sp   = sp/(nmoles2-nmoles1);
    
    /*  Subtract average from all velocities of 2nd part */
    for ( i=nmoles1; i<nmoles2; i++) 
      vh[i] = vh[i] - sp;
    
    /*  Find the average speed for 2nd part*/
    sp   = 0.0 ;
    for ( i=nmoles2; i<n3; i++) 
      sp = sp + vh[i];
    sp   = sp/(n3-nmoles2);
    
    /*  Subtract average from all velocities of 2nd part */
    for ( i=nmoles2; i<n3; i++) 
      vh[i] = vh[i] - sp;
    
    /*  Determine total kinetic energy  */
    ekin = 0.0 ;
    for ( i=0 ; i< n3; i++ )
      ekin  = ekin  + vh[i]*vh[i] ;
    
    ts = tscale * ekin ;
    sc = h * SQRT(TEMPERATURE/ts);
    for ( i=0; i< n3; i++) 
      vh[i] = vh[i] * sc ;
    
    /* just copy out into shared memory */
    for (i=0;i<n3/3;i++)
      {
	  vel[i].x = vh[IND(0,i)];
	  vel[i].y = vh[IND(1,i)];
	  vel[i].z = vh[IND(2,i)];
      }
    
    free(vh);
}

/*
 *============================================================================
 *  Function :  InitForces()
 *  Purpose :
 *    Initialize all the partial forces to 0.0
 *============================================================================
 */

void InitForces(struct force_val_t *force, int numMoles)
{
    int i;
    
    for (i=0;i<numMoles;i++ ) 
      {
	  force[i].x = 0.0;
	  force[i].y = 0.0;
	  force[i].z = 0.0;
      }
}

void print_initial_message()
{
    printf("MOLDYN - Molecular Dynamics Simulation\n\n");
    printf("Parallelized and ported to Tempest by\n");
    printf("\tShubu Mukherjee (WWT,  Univ. of Wisconsin-Madison), and\n");
    printf("\tShamik Sharma   (HPSL, Univ. of Maryland, College Park)\n\n");    
    printf("Report parallel time only.  We have not optimized the sequential\n");
    printf("\tstartup code.\n\n");
    
    fflush(stdout);
}

int set_coord_indirection()
{
    int i, ptr, proc;
    
    assert(coord_indirection_array != NULL);
    assert(num_particles != 0);
    
#ifndef BND_SHARING
    
    assert(STACHE_BLK_SIZE % SIZE_OF_COORD == 0);
    
    ptr = 0;
    
    for (proc = 0; proc < XX_NUM_NODES; proc++)
      {
	  for (i=low_index(num_particles, proc);
	       i<=high_index(num_particles, proc);
	       i++)
	    {
		coord_indirection_array[i] = ptr;
		ptr++;
	    }
	  
	  /* get to the next block */
	  ptr = ((DIV_CEIL((ptr * SIZE_OF_COORD), STACHE_BLK_SIZE) 
		  * STACHE_BLK_SIZE)
		 / SIZE_OF_COORD);
      }
    
    return ptr;
    
#else
    
    /* could be sharing at processor boundaries */
    
    for (i=0;i<num_particles;i++)
      {
	  coord_indirection_array[i] = i;
      }
    
    return num_particles;
#endif 
}

void init_remote_pairs()
{
    int i, j;
    int tot_pairs = (XX_NUM_NODES * (XX_NUM_NODES - 1)) / 2;
    int max_pairs = DIV_CEIL(tot_pairs, XX_NUM_NODES);

    remote_pairs = (struct remote_pair_t *)global_malloc(sizeof(struct remote_pair_t)
							 * XX_NUM_NODES);

#ifdef NO_FORK_SEMANTICS
    set_fork_semantics(&remote_pairs, sizeof(struct remote_pair_t *));
#endif

    for (i = 0; i < XX_NUM_NODES; i++)
      remote_pairs[i].num = 0;
    
    for (i = 0; i < XX_NUM_NODES; i++)
      for (j = i + 1; j < XX_NUM_NODES; j++)
	if (remote_pairs[i].num <= max_pairs)
	  remote_pairs[i].pairs[remote_pairs[i].num++] = j;
	else
	  remote_pairs[j].pairs[remote_pairs[j].num++] = i;
}

void local_init()
{
    int i;
    
#ifdef USE_ACK_UPDATES
    register_update_mode(ACK);
    BARRIER(,XX_NUM_NODES);
#else
#ifdef USE_NOACK_UPDATES
    register_update_mode(NO_ACK);
    BARRIER(,XX_NUM_NODES);  
#endif
#endif
    
    force_local = (struct force_val_t *)local_malloc(sizeof(struct force_val_t)
						     * num_particles);
    inter_local = (struct inter_t *)local_malloc(sizeof(struct inter_t)
						 * maxinteract);
    
#ifdef USE_NOACK_UPDATES
    coord_local = (char *)local_malloc(num_particles);
    memset(coord_local, 0, num_particles);
#endif
    
    low_mol = low_index(numMoles, XX_NODE_NUMBER);
    high_mol = high_index(numMoles, XX_NODE_NUMBER);
    
    /* calculate BuildNeigh indices for proper loadbalancing */
    inter_index[XX_NODE_NUMBER] = get_inter_index();
    
    if (XX_NODE_NUMBER == XX_NUM_NODES-1)
      inter_index[XX_NUM_NODES] = num_particles;
    
    for (i = 0; i < XX_NUM_NODES; i++)
      {
	  low_node[i] = low_index(num_particles, i);
	  high_node[i] = high_index(num_particles, i);
      }
    
#ifdef BULK_REDUCTION
    SetupChannels(num_particles);
#endif
    
    BARRIER(,XX_NUM_NODES);
}
